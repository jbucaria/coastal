// @/utils/pdfGenerator.js
import * as Print from 'expo-print';
import * as FileSystem from 'expo-file-system';

console.log('Print module:', Print); // Debug log to ensure Print is loaded

export const generatePdf = async (logoBase64 = '', ticket) => {
  if (!ticket || typeof ticket !== 'object') {
    throw new Error('Invalid ticket data provided');
  }

  if (!Print || typeof Print.printToFileAsync !== 'function') {
    throw new Error('Expo Print module is not available');
  }

  const {
    ticketNumber = 'N/A',
    street = '',
    apt = '',
    city = '',
    state = '',
    zip = '',
    createdAt = {},
    inspectorName = 'Unknown',
    reason = 'Not specified',
    inspectionData = { rooms: [] },
  } = ticket;

  let createdAtStr = '';
  if (createdAt && typeof createdAt.seconds === 'number') {
    createdAtStr = new Date(createdAt.seconds * 1000).toLocaleString();
  }

  const reportText = `Inspection Report

Ticket Number: ${ticketNumber}
Date: ${createdAtStr}
Address: ${street}${apt ? `, Apt ${apt}` : ''}, ${city}, ${state} ${zip}
Inspector: ${inspectorName}
Reason for Visit:
${reason}`;

  let roomsHTML = '';
  if (Array.isArray(inspectionData.rooms) && inspectionData.rooms.length > 0) {
    roomsHTML = inspectionData.rooms
      .map((room, index) => {
        const { roomTitle = `Unnamed Room ${index + 1}`, inspectionFindings = '', photos = [] } = room || {};
        const roomPhotosHTML =
          Array.isArray(photos) && photos.length > 0
            ? photos
                .map(photo =>
                  photo.downloadURL ? `<img src="${photo.downloadURL}" alt="${roomTitle} photo" />` : ''
                )
                .join('')
            : `<p class="no-photos">No photos available for this room.</p>`;
        return `
          <div class="room-card">
            <h3>${roomTitle}</h3>
            <div class="findings">
              <p><strong>Findings:</strong></p>
              <p>${inspectionFindings}</p>
            </div>
            <div class="photo-gallery">
              ${roomPhotosHTML}
            </div>
          </div>
        `;
      })
      .join('');
  } else {
    roomsHTML = `<p class="no-data">No inspection data available.</p>`;
  }

  const htmlContent = `
    <html>
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
          body { font-family: Arial, sans-serif; margin: 0; padding: 0; color: #2d3748; line-height: 1.6; }
          .container { max-width: 900px; margin: 40px auto; background: #fff; border-radius: 12px; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1); }
          .header { background: #2b6cb0; color: white; padding: 20px; text-align: center; }
          .header img { max-width: 250px; }
          .header h1 { margin: 0; font-size: 28px; }
          .report-section { padding: 30px; }
          .report-section pre { background: #edf2f7; padding: 20px; border-radius: 8px; }
          .room-card { background: #f7fafc; border-radius: 8px; padding: 20px; margin-bottom: 20px; }
          .room-card h3 { color: #2b6cb0; font-size: 20px; }
          .photo-gallery { display: flex; flex-wrap: wrap; gap: 10px; }
          .photo-gallery img { width: 220px; height: 165px; object-fit: cover; border-radius: 6px; }
          .no-photos, .no-data { color: #718096; font-style: italic; text-align: center; }
          .footer { text-align: center; padding: 20px; font-size: 12px; color: #a0aec0; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            ${logoBase64 ? `<img src="data:image/png;base64,${logoBase64}" alt="Logo" />` : ''}
            <h1>Inspection Report</h1>
          </div>
          <div class="report-section">
            <pre>${reportText}</pre>
          </div>
          <div class="report-section">
            ${roomsHTML}
          </div>
          <div class="footer">
            Report generated by Coastal Restoration Services
          </div>
        </div>
      </body>
    </html>
  `;

  try {
    const { uri } = await Print.printToFileAsync({
      html: htmlContent,
      base64: false,
    });
    const finalUri = `${FileSystem.documentDirectory}inspection_report_${ticketNumber}.pdf`;
    await FileSystem.moveAsync({
      from: uri,
      to: finalUri,
    });
    return finalUri;
  } catch (error) {
    throw new Error(`PDF generation failed: ${error.message}`);
  }
};